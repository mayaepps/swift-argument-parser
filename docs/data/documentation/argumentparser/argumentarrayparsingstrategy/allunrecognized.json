{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allUnrecognized"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"code":"allUnrecognized","type":"codeVoice"},{"type":"text","text":" parsing strategy to suppress"},{"type":"text","text":" "},{"text":"“unexpected argument” errors or to capture unrecognized inputs for further","type":"text"},{"type":"text","text":" "},{"type":"text","text":"processing."}]},{"type":"paragraph","inlineContent":[{"text":"For example, the ","type":"text"},{"type":"codeVoice","code":"Example"},{"type":"text","text":" command defined below has an "},{"type":"codeVoice","code":"other"},{"text":" array that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"code":"allUnrecognized","type":"codeVoice"},{"text":" parsing strategy:","type":"text"}]},{"type":"codeListing","code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","    @Argument var name: String","","    @Argument(parsing: .allUnrecognized)","    var other: [String]","","    func run() {","        print(other.joined(separator: \"\\n\"))","    }","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"After parsing the "},{"type":"codeVoice","code":"--verbose"},{"text":" flag and ","type":"text"},{"code":"<name>","type":"codeVoice"},{"text":" argument, any remaining","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"input is captured in the "},{"code":"other","type":"codeVoice"},{"type":"text","text":" array."}]},{"code":["$ example --verbose Negin one two","one","two","$ example Asa --verbose --other -zzz","--other","-zzz"],"type":"codeListing","syntax":null}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"After parsing, capture all unrecognized inputs in this argument array."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Parsing Strategies","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Type Property","title":"allUnrecognized","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"allUnrecognized","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"}],"symbolKind":"property","modules":[{"name":"ArgumentParser"}],"externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV15allUnrecognizedACvpZ"},"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","title":"remaining","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"type":"text","text":"Parse only unprefixed values from the command-line input, ignoring"},{"text":" ","type":"text"},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","url":"\/documentation\/argumentparser\/argument","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Argument"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","navigatorTitle":[{"text":"Argument","kind":"identifier"}]},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough","title":"captureForPassthrough","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"captureForPassthrough"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"code":"--","type":"codeVoice"},{"text":" terminator.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized","title":"allUnrecognized","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"allUnrecognized","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"kind":"symbol","abstract":[{"text":"After parsing, capture all unrecognized inputs in this argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","title":"postTerminator","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"postTerminator"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Before parsing, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" terminator in this","type":"text"},{"type":"text","text":" "},{"text":"argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"text":" ","type":"text"},{"type":"text","text":"into an array."}],"title":"ArgumentArrayParsingStrategy","type":"topic"}}}