{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"postTerminator","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}]},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"code":"Example","type":"codeVoice"},{"text":" command defined below has a ","type":"text"},{"type":"codeVoice","code":"words"},{"type":"text","text":" array that"},{"text":" ","type":"text"},{"text":"uses the ","type":"text"},{"type":"codeVoice","code":"postTerminator"},{"text":" parsing strategy:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","    @Argument var name = \"\"","","    @Argument(parsing: .postTerminator)","    var words: [String]","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"]},{"inlineContent":[{"text":"Before looking for the ","type":"text"},{"type":"codeVoice","code":"--verbose"},{"text":" flag and ","type":"text"},{"type":"codeVoice","code":"<name>"},{"type":"text","text":" argument, any inputs"},{"type":"text","text":" "},{"text":"after the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" terminator are captured into the ","type":"text"},{"type":"codeVoice","code":"words"},{"text":" array.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["$ example --verbose Asa -- one two --other","one","two","--other","$ example Asa Extra -- one two --other","Error: Unexpected argument 'Extra'"]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"This parsing strategy can be surprising for users, since it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes the behavior of the "},{"type":"codeVoice","code":"--"},{"text":" terminator. Prefer ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"reference"},{"type":"text","text":" "},{"text":"whenever possible.","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"metadata":{"roleHeading":"Type Property","symbolKind":"property","title":"postTerminator","role":"symbol","externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV14postTerminatorACvpZ","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"postTerminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"}],"modules":[{"name":"ArgumentParser"}]},"abstract":[{"text":"Before parsing, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator in this"},{"type":"text","text":" "},{"type":"text","text":"argument array."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"],"generated":true,"title":"Parsing Strategies"}],"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized","title":"allUnrecognized","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"allUnrecognized","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"kind":"symbol","abstract":[{"text":"After parsing, capture all unrecognized inputs in this argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"text":" ","type":"text"},{"type":"text","text":"into an array."}],"title":"ArgumentArrayParsingStrategy","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough","title":"captureForPassthrough","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"captureForPassthrough"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"code":"--","type":"codeVoice"},{"text":" terminator.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","title":"postTerminator","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"postTerminator"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Before parsing, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" terminator in this","type":"text"},{"type":"text","text":" "},{"text":"argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","url":"\/documentation\/argumentparser\/argument","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Argument"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","navigatorTitle":[{"text":"Argument","kind":"identifier"}]},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","title":"remaining","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"type":"text","text":"Parse only unprefixed values from the command-line input, ignoring"},{"text":" ","type":"text"},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"topic"}}}