{"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Type Property","role":"symbol","title":"captureForPassthrough","symbolKind":"property","modules":[{"name":"ArgumentParser"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"captureForPassthrough"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV21captureForPassthroughACvpZ"},"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough"},"abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"type":"codeVoice","code":"--"},{"text":" terminator.","type":"text"}],"seeAlsoSections":[{"title":"Parsing Strategies","generated":true,"identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"captureForPassthrough","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"]}]},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"code":"captureForPassthrough","type":"codeVoice"},{"text":" parsing strategy if you need to","type":"text"},{"type":"text","text":" "},{"text":"capture a userâ€™s input to manually pass it unchanged to another command.","type":"text"}]},{"inlineContent":[{"text":"When you use this parsing strategy, the parser stops parsing flags and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"options as soon as it encounters a positional argument or an unrecognized"},{"type":"text","text":" "},{"text":"flag, and captures all remaining inputs in the array argument.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, the ","type":"text"},{"code":"Example","type":"codeVoice"},{"text":" command defined below has an ","type":"text"},{"type":"codeVoice","code":"words"},{"type":"text","text":" array that"},{"text":" ","type":"text"},{"text":"uses the ","type":"text"},{"code":"captureForPassthrough","type":"codeVoice"},{"type":"text","text":" parsing strategy:"}],"type":"paragraph"},{"syntax":null,"code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","","    @Argument(parsing: .captureForPassthrough)","    var words: [String] = []","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Any values after the first unrecognized input are captured in the ","type":"text"},{"code":"words","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"array."}]},{"type":"codeListing","syntax":null,"code":["$ example --verbose one two --other","one","two","--other","$ example one two --verbose","one","two","--verbose"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the "},{"type":"codeVoice","code":"captureForPassthrough"},{"text":" parsing strategy, the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator"},{"type":"text","text":" "},{"text":"is included in the captured values.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["$ example --verbose one two -- --other","one","two","--","--other"]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This parsing strategy can be surprising for users, particularly","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when combined with options and flags. Prefer "},{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","isActive":true,"type":"reference"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","isActive":true},{"type":"text","text":" whenever possible, since users can always terminate"},{"type":"text","text":" "},{"type":"text","text":"options and flags with the "},{"type":"codeVoice","code":"--"},{"text":" terminator. With the ","type":"text"},{"type":"codeVoice","code":"remaining"},{"type":"text","text":" "},{"text":"parsing strategy, the input ","type":"text"},{"code":"--verbose -- one two --other","type":"codeVoice"},{"text":" would have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the same result as the first example above."}]}],"style":"note"}],"kind":"content"}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","title":"postTerminator","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"postTerminator"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Before parsing, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" terminator in this","type":"text"},{"type":"text","text":" "},{"text":"argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/captureForPassthrough":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/captureforpassthrough","title":"captureForPassthrough","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"captureForPassthrough"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"text":"Parse all remaining inputs after parsing any known options or flags,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including dash-prefixed inputs and the "},{"code":"--","type":"codeVoice"},{"text":" terminator.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/captureForPassthrough","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","url":"\/documentation\/argumentparser\/argument","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Argument"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","navigatorTitle":[{"text":"Argument","kind":"identifier"}]},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/allUnrecognized":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/allunrecognized","title":"allUnrecognized","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"allUnrecognized","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"kind":"symbol","abstract":[{"text":"After parsing, capture all unrecognized inputs in this argument array.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/allUnrecognized","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"text":" ","type":"text"},{"type":"text","text":"into an array."}],"title":"ArgumentArrayParsingStrategy","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","title":"remaining","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"}],"kind":"symbol","abstract":[{"type":"text","text":"Parse only unprefixed values from the command-line input, ignoring"},{"text":" ","type":"text"},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"topic"}}}