{"kind":"symbol","seeAlsoSections":[{"generated":true,"title":"Arguments, Options, and Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Flag","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" wrapper to define a property of your custom type as a"},{"text":" ","type":"text"},{"type":"text","text":"command-line flag. A "},{"type":"emphasis","inlineContent":[{"text":"flag","type":"text"}]},{"type":"text","text":" is a dash-prefixed label that can be provided on"},{"type":"text","text":" "},{"text":"the command line, such as ","type":"text"},{"code":"-d","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"--debug"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, the following program declares a flag that lets a user indicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that seconds should be included when printing the time."}]},{"code":["@main","struct Time: ParsableCommand {","    @Flag var includeSeconds = false","","    mutating func run() {","        if includeSeconds {","            print(Date.now.formatted(.dateTime.hour().minute().second()))","        } else {","            print(Date.now.formatted(.dateTime.hour().minute()))","        }","    }","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"code":"includeSeconds","type":"codeVoice"},{"text":" has a default value of ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":", but becomes "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if"},{"type":"text","text":" "},{"code":"--include-seconds","type":"codeVoice"},{"type":"text","text":" is provided on the command line."}]},{"type":"codeListing","syntax":null,"code":["$ time","11:09 AM","$ time --include-seconds","11:09:15 AM"]},{"type":"paragraph","inlineContent":[{"text":"A flag can have a value that is a ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", or any "},{"type":"codeVoice","code":"EnumerableFlag"},{"text":" ","type":"text"},{"text":"type. When using an ","type":"text"},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type as a flag, the individual cases"},{"text":" ","type":"text"},{"type":"text","text":"form the flags that are used on the command line."}]},{"code":["@main","struct Math: ParsableCommand {","    enum Operation: EnumerableFlag {","        case add","        case multiply","    }","","    @Flag var operation: Operation","","    mutating func run() {","        print(\"Time to \\(operation)!\")","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"Instead of using the name of the "},{"type":"codeVoice","code":"operation"},{"text":" property as the flag in this","type":"text"},{"type":"text","text":" "},{"text":"case, the two cases of the ","type":"text"},{"type":"codeVoice","code":"Operation"},{"type":"text","text":" enumeration become valid flags."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"operation","type":"codeVoice"},{"type":"text","text":" property is neither optional nor given a default value, so"},{"text":" ","type":"text"},{"type":"text","text":"one of the two flags is required."}],"type":"paragraph"},{"type":"codeListing","code":["$ math --add","Time to add!","$ math","Error: Missing one of: '--add', '--multiply'"],"syntax":null}]}],"topicSections":[{"identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)"],"title":"Boolean Flags"},{"title":"Boolean Flags with Inversions","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagInversion"]},{"title":"Counted Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)"]},{"title":"Custom Enumerable Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)"]},{"title":"Infrequently Used APIs","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(from:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue"]},{"title":"Supporting Types","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ArgumentParser\/s23CustomStringConvertibleP","doc:\/\/ArgumentParser\/Se"]}],"metadata":{"modules":[{"name":"ArgumentParser"}],"externalID":"s:14ArgumentParser4FlagV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Flag","kind":"identifier"}],"role":"symbol","roleHeading":"Structure","title":"Flag","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"Flag"}]},"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/flag"]}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/Flag/CustomStringConvertible-Implementations":{"title":"CustomStringConvertible Implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/argumentparser\/flag\/customstringconvertible-implementations"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(help:)":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(help:)","role":"symbol","abstract":[{"text":"Creates an array property with no default value that gets its values from the presence of zero or more flags, where the allowed flags are defined by an ","type":"text"},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"title":"init(help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Argument":{"title":"Argument","url":"\/documentation\/argumentparser\/argument","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Argument"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","navigatorTitle":[{"text":"Argument","kind":"identifier"}]},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:help:)":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:help:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"text":"NameSpecification","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of a flag."}],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(wrappedValue:name:help:)","kind":"symbol"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-5fggj":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-5fggj","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a property with no default value that gets its value from the presence of a flag."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"?)","kind":"text"}],"title":"init(exclusivity:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/DeclaringArguments":{"url":"\/documentation\/argumentparser\/declaringarguments","kind":"article","role":"article","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments","abstract":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Argument"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@Option"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property wrappers to declare the command-line interface for your command."}],"title":"Declaring Arguments, Options, and Flags","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:exclusivity:help:)":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:exclusivity:help:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a property with a default value provided by standard Swift default value syntax that gets its value from the presence of a flag."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EnumerableFlag"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"exclusivity","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FlagExclusivity","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"text":"?)","kind":"text"}],"title":"init(wrappedValue:exclusivity:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-1h8f7":{"title":"init(name:inversion:exclusivity:help:)","role":"symbol","abstract":[{"type":"text","text":"Creates a Boolean property that reads its value from the presence of"},{"text":" ","type":"text"},{"text":"one or more inverted flags.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","text":"NameSpecification","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"inversion","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FlagInversion","preciseIdentifier":"s:14ArgumentParser13FlagInversionV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"text":"FlagExclusivity","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"text":", ","kind":"text"},{"text":"help","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"text":"?)","kind":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool?"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-1h8f7","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-12okg":{"title":"init(name:inversion:exclusivity:help:)","role":"symbol","abstract":[{"type":"text","text":"Creates a Boolean property with no default value that reads its value from the presence of one or more inverted flags."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"text":"NameSpecification","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"inversion"},{"text":": ","kind":"text"},{"text":"FlagInversion","preciseIdentifier":"s:14ArgumentParser13FlagInversionV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"exclusivity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"text":"ArgumentHelp","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"?)","kind":"text"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-12okg","type":"topic"},"doc://ArgumentParser/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","identifier":"doc:\/\/ArgumentParser\/s23CustomStringConvertibleP","type":"unresolvable"},"doc://ArgumentParser/documentation/ArgumentParser/FlagInversion":{"title":"FlagInversion","role":"symbol","abstract":[{"type":"text","text":"The options for converting a Boolean flag into a "},{"code":"true","type":"codeVoice"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"false"},{"text":" pair.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FlagInversion","kind":"identifier"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagInversion","navigatorTitle":[{"kind":"identifier","text":"FlagInversion"}],"kind":"symbol","url":"\/documentation\/argumentparser\/flaginversion","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:inversion:exclusivity:help:)":{"title":"init(wrappedValue:name:inversion:exclusivity:help:)","role":"symbol","abstract":[{"type":"text","text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of one or more inverted flags."}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"text":"NameSpecification","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"text":", ","kind":"text"},{"text":"inversion","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FlagInversion","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","kind":"typeIdentifier","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:inversion:exclusivity:help:)","type":"topic"},"doc://ArgumentParser/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/ArgumentParser\/Se","type":"unresolvable"},"doc://ArgumentParser/documentation/ArgumentParser/FlagExclusivity":{"navigatorTitle":[{"kind":"identifier","text":"FlagExclusivity"}],"type":"topic","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity","kind":"symbol","title":"FlagExclusivity","abstract":[{"text":"The options for treating enumeration-based flags as exclusive.","type":"text"}],"url":"\/documentation\/argumentparser\/flagexclusivity","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagExclusivity"}]},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(from:)":{"title":"init(from:)","kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(from:)","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(from:)","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP","text":"Decoder"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/OptionGroup":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"OptionGroup","kind":"identifier"}],"url":"\/documentation\/argumentparser\/optiongroup","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","navigatorTitle":[{"kind":"identifier","text":"OptionGroup"}],"abstract":[{"type":"text","text":"A wrapper that transparently includes a parsable type."}],"title":"OptionGroup","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:help:)":{"type":"topic","title":"init(name:help:)","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)","abstract":[{"type":"text","text":"Creates an integer property that gets its value from the number of times"},{"type":"text","text":" "},{"type":"text","text":"a flag appears."}],"url":"\/documentation\/argumentparser\/flag\/init(name:help:)","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"name","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp"},{"text":"?)","kind":"text"}]},"doc://ArgumentParser/documentation/ArgumentParser/Flag":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Flag","kind":"identifier"}],"url":"\/documentation\/argumentparser\/flag","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag","navigatorTitle":[{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"title":"Flag","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/wrappedValue":{"title":"wrappedValue","kind":"symbol","url":"\/documentation\/argumentparser\/flag\/wrappedvalue","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue","abstract":[{"text":"The value presented by this property wrapper.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:help:)":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)","kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:help:)","role":"symbol","abstract":[{"type":"text","text":"Creates an array property that gets its values from the presence of"},{"type":"text","text":" "},{"type":"text","text":"zero or more flags, where the allowed flags are defined by an"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Element"},{"text":"], ","kind":"text"},{"text":"help","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"?)","kind":"text"}],"title":"init(wrappedValue:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"url":"\/documentation\/argumentparser\/option","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","navigatorTitle":[{"text":"Option","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"title":"Option","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","title":"ParsableArguments","abstract":[{"type":"text","text":"A type that can be parsed from a program’s command-line arguments."}],"kind":"symbol","url":"\/documentation\/argumentparser\/parsablearguments","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParsableArguments"}],"navigatorTitle":[{"kind":"identifier","text":"ParsableArguments"}]},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-38n7u":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","kind":"symbol","url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-38n7u","role":"symbol","abstract":[{"text":"Creates a property that gets its value from the presence of a flag,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the allowed flags are defined by an "},{"code":"EnumerableFlag","type":"codeVoice"},{"type":"text","text":" type."}],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"text":"exclusivity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"title":"init(exclusivity:help:)"}}}