{"sections":[],"metadata":{"externalID":"s:14ArgumentParser26SingleValueParsingStrategyV13unconditionalACvpZ","symbolKind":"property","modules":[{"name":"ArgumentParser"}],"title":"unconditional","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"unconditional","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SingleValueParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV"}],"roleHeading":"Type Property","role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unconditional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SingleValueParsingStrategy","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy","preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"]}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For inputs such as "},{"code":"--foo --bar baz","type":"codeVoice"},{"text":", if ","type":"text"},{"type":"codeVoice","code":".unconditional"},{"text":" is used for ","type":"text"},{"code":"foo","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this would read "},{"code":"--bar","type":"codeVoice"},{"type":"text","text":" as the value for "},{"code":"foo","type":"codeVoice"},{"text":" and would use ","type":"text"},{"code":"baz","type":"codeVoice"},{"text":" as","type":"text"},{"type":"text","text":" "},{"text":"the next positional argument.","type":"text"}]},{"inlineContent":[{"text":"This allows reading negative numeric values or capturing flags to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed through to another program since the leading hyphen is normally"},{"type":"text","text":" "},{"text":"interpreted as the start of another option.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This is usually "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" what users would expect. Use with caution."}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Parse the next input, even if it could be interpreted as an option or"},{"type":"text","text":" "},{"text":"flag.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional"},"references":{"doc://ArgumentParser/documentation/ArgumentParser/SingleValueParsingStrategy":{"kind":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SingleValueParsingStrategy"}],"url":"\/documentation\/argumentparser\/singlevalueparsingstrategy","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SingleValueParsingStrategy","kind":"identifier"}],"title":"SingleValueParsingStrategy","abstract":[{"text":"The strategy to use when parsing a single value from ","type":"text"},{"code":"@Option","type":"codeVoice"},{"type":"text","text":" arguments."}]},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/SingleValueParsingStrategy/unconditional":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unconditional"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV","text":"SingleValueParsingStrategy"}],"type":"topic","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional","kind":"symbol","role":"symbol","abstract":[{"text":"Parse the next input, even if it could be interpreted as an option or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"flag."}],"title":"unconditional"},"doc://ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"url":"\/documentation\/argumentparser\/option","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","navigatorTitle":[{"text":"Option","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"title":"Option","type":"topic"}}}