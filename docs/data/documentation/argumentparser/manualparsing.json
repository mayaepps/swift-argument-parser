{"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExperimentalFeatures"],"generated":true}],"abstract":[{"text":"Provide your own array of command-line inputs or work directly with parsed command-line arguments.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"For most programs, denoting the root command type as ","type":"text"},{"type":"codeVoice","code":"@main"},{"text":" is all that’s necessary. As the program’s entry point, that type parses the command-line arguments to find the correct command from your tree of nested subcommands, instantiates and validates the result, and executes the chosen command. For more control, however, you can perform each of those steps manually.","type":"text"}],"type":"paragraph"},{"text":"Parsing Arguments","type":"heading","level":2,"anchor":"Parsing-Arguments"},{"inlineContent":[{"type":"text","text":"For simple Swift scripts, and for those who prefer a straight-down-the-left-edge-of-the-screen scripting style, you can define a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments"},{"type":"text","text":" type to parse explicitly from the command-line arguments."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Let’s implement the ","type":"text"},{"type":"codeVoice","code":"Select"},{"type":"text","text":" command discussed in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Validation"},{"text":", but using a scripty style instead of the typical command. First, we define the options as a ","type":"text"},{"type":"codeVoice","code":"ParsableArguments"},{"text":" type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct SelectOptions: ParsableArguments {","    @Option var count: Int = 1","    @Argument var elements: [String] = []","}"]},{"type":"paragraph","inlineContent":[{"text":"The next step is to parse our options from the command-line input:","type":"text"}]},{"type":"codeListing","code":["let options = SelectOptions.parseOrExit()"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The static "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/parseOrExit(_:)"},{"text":" method either returns a fully initialized instance of the type, or exits with an error message and code. Alternatively, you can call the throwing ","type":"text"},{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/parse(_:)","type":"reference","isActive":true},{"text":" method if you’d like to catch any errors that arise during parsing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We can perform validation on the inputs and exit the script if necessary:"}],"type":"paragraph"},{"type":"codeListing","code":["guard options.elements.count >= options.count else {","    let error = ValidationError(\"Please specify a 'count' less than the number of elements.\")","    SelectOptions.exit(withError: error)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you would expect, the "},{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/exit(withError:)","type":"reference","isActive":true},{"text":" method includes usage information when you pass it a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ValidationError"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we print out the requested number of elements:"}]},{"syntax":"swift","code":["let chosen = options.elements","    .shuffled()","    .prefix(options.count)","print(chosen.joined(separator: \"\\n\"))"],"type":"codeListing"},{"text":"Parsing Commands","level":2,"anchor":"Parsing-Commands","type":"heading"},{"inlineContent":[{"type":"text","text":"Manually parsing commands is a little more complex than parsing a simple "},{"type":"codeVoice","code":"ParsableArguments"},{"type":"text","text":" type. The result of parsing from a tree of subcommands may be of a different type than the root of the tree, so the static "},{"type":"reference","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/parseAsRoot(_:)","isActive":true},{"text":" method returns a type-erased ","type":"text"},{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s see how this works by using the "},{"code":"Math","type":"codeVoice"},{"text":" command and subcommands defined in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands"},{"text":". This time, instead of calling ","type":"text"},{"type":"codeVoice","code":"Math.main()"},{"text":", we’ll call ","type":"text"},{"code":"Math.parseAsRoot()","type":"codeVoice"},{"text":", and switch over the result:","type":"text"}],"type":"paragraph"},{"code":["do {","    var command = try Math.parseAsRoot()","","    switch command {","    case var command as Math.Add:","        print(\"You chose to add \\(command.options.values.count) values.\")","        command.run()","    default:","        print(\"You chose to do something else.\")","        try command.run()","    }","} catch {","    Math.exit(withError: error)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our new logic intercepts the command between validation and running, and outputs an additional message:"}]},{"type":"codeListing","code":["% math 10 15 7","You chose to add 3 values.","32","% math multiply 10 15 7","You chose to do something else.","1050"],"syntax":null},{"type":"heading","anchor":"Providing-Command-Line-Input","level":2,"text":"Providing Command-Line Input"},{"inlineContent":[{"text":"All of the parsing methods — ","type":"text"},{"code":"parse()","type":"codeVoice"},{"text":", ","type":"text"},{"code":"parseOrExit()","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"parseAsRoot()"},{"text":" — can optionally take an array of command-line inputs as an argument. You can use this capability to test your commands, to perform pre-parse filtering of the command-line arguments, or to manually execute commands from within the same or another target.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s update our "},{"code":"select","type":"codeVoice"},{"type":"text","text":" script above to strip out any words that contain all capital letters before parsing the inputs."}]},{"type":"codeListing","syntax":"swift","code":["let noShoutingArguments = CommandLine.arguments.dropFirst().filter { phrase in","    phrase.uppercased() != phrase","}","let options = SelectOptions.parseOrExit(noShoutingArguments)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when we call our command, the parser won’t even see the capitalized words — "},{"code":"HEY","type":"codeVoice"},{"type":"text","text":" won’t ever be printed:"}]},{"type":"codeListing","syntax":null,"code":["% select hi howdy HEY --count 2","hi","howdy","% select hi howdy HEY --count 2","howdy","hi"]}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ManualParsing","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/manualparsing"]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"ArgumentParser"}],"title":"Manual Parsing and Testing"},"kind":"article","references":{"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments/parseOrExit(_:)":{"url":"\/documentation\/argumentparser\/parsablearguments\/parseorexit(_:)","title":"parseOrExit(_:)","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/parseOrExit(_:)","abstract":[{"text":"Parses a new instance of this type from command-line arguments or exits","type":"text"},{"type":"text","text":" "},{"text":"with a relevant message.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parseOrExit","kind":"identifier"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"]?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol"},"doc://ArgumentParser/documentation/ArgumentParser/ExperimentalFeatures":{"role":"article","abstract":[{"text":"Learn about ArgumentParser’s experimental features.","type":"text"}],"title":"Experimental Features","type":"topic","url":"\/documentation\/argumentparser\/experimentalfeatures","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExperimentalFeatures","kind":"article"},"doc://ArgumentParser/documentation/ArgumentParser/Validation":{"title":"Providing Custom Validation","url":"\/documentation\/argumentparser\/validation","abstract":[{"type":"text","text":"Provide helpful feedback to users when things go wrong."}],"type":"topic","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Validation","kind":"article","role":"article"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableCommand/parseAsRoot(_:)":{"role":"symbol","abstract":[{"text":"Parses an instance of this type, or one of its subcommands, from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"command-line arguments."}],"title":"parseAsRoot(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"parseAsRoot"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"]?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"ParsableCommand","preciseIdentifier":"s:14ArgumentParser15ParsableCommandP","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/argumentparser\/parsablecommand\/parseasroot(_:)","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/parseAsRoot(_:)","kind":"symbol"},"doc://ArgumentParser/documentation/ArgumentParser/ValidationError":{"title":"ValidationError","type":"topic","abstract":[{"text":"An error type that is presented to the user as an error with parsing their","type":"text"},{"type":"text","text":" "},{"text":"command-line input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationError","kind":"identifier"}],"navigatorTitle":[{"text":"ValidationError","kind":"identifier"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ValidationError","kind":"symbol","url":"\/documentation\/argumentparser\/validationerror"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments/parse(_:)":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/parse(_:)","url":"\/documentation\/argumentparser\/parsablearguments\/parse(_:)","title":"parse(_:)","abstract":[{"type":"text","text":"Parses a new instance of this type from command-line arguments."}],"kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"parse","kind":"identifier"},{"text":"([","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableCommand":{"title":"ParsableCommand","type":"topic","abstract":[{"text":"A type that can be executed as part of a nested tree of commands.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ParsableCommand","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ParsableCommand"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand","kind":"symbol","url":"\/documentation\/argumentparser\/parsablecommand"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","title":"ParsableArguments","abstract":[{"type":"text","text":"A type that can be parsed from a program’s command-line arguments."}],"kind":"symbol","url":"\/documentation\/argumentparser\/parsablearguments","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParsableArguments"}],"navigatorTitle":[{"kind":"identifier","text":"ParsableArguments"}]},"doc://ArgumentParser/documentation/ArgumentParser/CommandsAndSubcommands":{"role":"article","abstract":[{"text":"Break complex command-line tools into a tree of subcommands.","type":"text"}],"title":"Defining Commands and Subcommands","type":"topic","url":"\/documentation\/argumentparser\/commandsandsubcommands","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands","kind":"article"},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments/exit(withError:)":{"role":"symbol","abstract":[{"text":"Terminates execution with a message and exit code that is appropriate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the given error."}],"title":"exit(withError:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"exit","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"withError"},{"kind":"text","text":": "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":"?) -> "},{"text":"Never","kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO"}],"type":"topic","url":"\/documentation\/argumentparser\/parsablearguments\/exit(witherror:)","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments\/exit(withError:)","kind":"symbol"}}}