{"abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remaining"},{"kind":"text","text":": "},{"text":"ArrayParsingStrategy","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"code":".remaining","type":"codeVoice"},{"text":" can be used for capturing pass-through flags. For example, for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a parsable type defined as"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Option(parsing: .remaining) var passthrough: [String]"},{"type":"text","text":":"}]},{"code":["$ cmd --passthrough --foo 1 --bar 2 -xvf","------------","options.passthrough == [\"--foo\", \"1\", \"--bar\", \"2\", \"-xvf\"]"],"type":"codeListing","syntax":null},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will read all inputs following the option without attempting to do any parsing. This is"},{"text":" ","type":"text"},{"text":"usually ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" what users would expect. Use with caution.","type":"text"}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"Consider using a trailing ","type":"text"},{"code":"@Argument","type":"codeVoice"},{"text":" instead and letting users explicitly turn off parsing","type":"text"},{"text":" ","type":"text"},{"text":"through the terminator ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":". That is the more common approach. For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct Options: ParsableArguments {","    @Option var name: String","    @Argument var remainder: [String]","}"]},{"inlineContent":[{"type":"text","text":"would parse the input "},{"code":"--name Foo -- Bar --baz","type":"codeVoice"},{"type":"text","text":" such that the "},{"code":"remainder","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"would hold the value "},{"type":"codeVoice","code":"[\"Bar\", \"--baz\"]"},{"text":".","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/arrayparsingstrategy\/remaining"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy"]]},"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Type Property","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"remaining"},{"text":": ","kind":"text"},{"text":"ArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"externalID":"s:14ArgumentParser20ArrayParsingStrategyV9remainingACvpZ","symbolKind":"property","modules":[{"name":"ArgumentParser"}],"title":"remaining"},"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy/remaining":{"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","role":"symbol","abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","text":"ArrayParsingStrategy","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","title":"remaining","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/remaining"},"doc://ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy":{"type":"topic","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","url":"\/documentation\/argumentparser\/arrayparsingstrategy","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayParsingStrategy"}],"navigatorTitle":[{"kind":"identifier","text":"ArrayParsingStrategy"}],"role":"symbol","abstract":[{"text":"The strategy to use when parsing multiple values from ","type":"text"},{"type":"codeVoice","code":"@Option"},{"type":"text","text":" arguments into an"},{"text":" ","type":"text"},{"type":"text","text":"array."}],"title":"ArrayParsingStrategy"},"doc://ArgumentParser/documentation/ArgumentParser/Option":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Option","kind":"identifier"}],"url":"\/documentation\/argumentparser\/option","kind":"symbol","role":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","navigatorTitle":[{"text":"Option","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"title":"Option","type":"topic"},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"}}}