{"abstract":[{"type":"text","text":"A type that represents the different possible flags to be used by a"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Flag"},{"text":" property.","type":"text"}],"topicSections":[{"title":"Type Methods","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0"]}],"relationshipsSections":[{"title":"Inherits From","type":"inheritsFrom","kind":"relationships","identifiers":["doc:\/\/ArgumentParser\/s12CaseIterableP","doc:\/\/ArgumentParser\/SQ"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"EnumerableFlag","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12CaseIterableP","text":"CaseIterable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}]}]},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example, the ","type":"text"},{"code":"Size","type":"codeVoice"},{"text":" enumeration declared here can be used as the type of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"@Flag"},{"text":" property:","type":"text"}]},{"code":["enum Size: String, EnumerableFlag {","    case small, medium, large, extraLarge","}","","struct Example: ParsableCommand {","    @Flag var sizes: [Size]","","    mutating func run() {","        print(sizes)","    }","}"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"By default, each case name is converted to a flag by using the "},{"type":"codeVoice","code":".long"},{"text":" name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specification, so a user can call "},{"type":"codeVoice","code":"example"},{"text":" like this:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["$ example --small --large","[.small, .large]"]},{"inlineContent":[{"type":"text","text":"Provide alternative or additional name specifications for each case by"},{"text":" ","type":"text"},{"type":"text","text":"implementing the "},{"code":"name(for:)","type":"codeVoice"},{"type":"text","text":" static method on your "},{"code":"EnumerableFlag","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"},{"code":["extension Size {","    static func name(for value: Self) -> NameSpecification {","        switch value {","        case .extraLarge:","            return [.customShort(\"x\"), .long]","        default:","            return .shortAndLong","        }","    }","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"With this extension, a user can use short or long versions of the flags:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["$ example -s -l -x --medium","[.small, .large, .extraLarge, .medium]"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/argumentparser\/enumerableflag"]}],"metadata":{"navigatorTitle":[{"text":"EnumerableFlag","kind":"identifier"}],"externalID":"s:14ArgumentParser14EnumerableFlagP","title":"EnumerableFlag","modules":[{"name":"ArgumentParser"}],"role":"symbol","roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumerableFlag"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag"},"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"sections":[],"kind":"symbol","seeAlsoSections":[{"title":"Custom Types","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument"],"generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EnumerableFlag"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag","role":"symbol","title":"EnumerableFlag","abstract":[{"text":"A type that represents the different possible flags to be used by a","type":"text"},{"type":"text","text":" "},{"code":"@Flag","type":"codeVoice"},{"text":" property.","type":"text"}],"url":"\/documentation\/argumentparser\/enumerableflag","navigatorTitle":[{"kind":"identifier","text":"EnumerableFlag"}]},"doc://ArgumentParser/documentation/ArgumentParser/ExpressibleByArgument":{"type":"topic","url":"\/documentation\/argumentparser\/expressiblebyargument","abstract":[{"text":"A type that can be expressed as a command-line argument.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByArgument","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArgument"}],"title":"ExpressibleByArgument"},"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag/name(for:)-2rrp0":{"url":"\/documentation\/argumentparser\/enumerableflag\/name(for:)-2rrp0","title":"name(for:)","type":"topic","abstract":[{"text":"Returns the name specification to use for the given flag.","type":"text"}],"required":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0","defaultImplementations":1,"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"name","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser17NameSpecificationV","text":"NameSpecification","kind":"typeIdentifier"}],"role":"symbol"},"doc://ArgumentParser/documentation/ArgumentParser":{"title":"ArgumentParser","role":"collection","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/s12CaseIterableP":{"identifier":"doc:\/\/ArgumentParser\/s12CaseIterableP","title":"Swift.CaseIterable","type":"unresolvable"},"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag/help(for:)-8mmm":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"help","kind":"identifier"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","role":"symbol","title":"help(for:)","abstract":[{"text":"Returns the help information to show for the given flag.","type":"text"}],"url":"\/documentation\/argumentparser\/enumerableflag\/help(for:)-8mmm","required":true,"defaultImplementations":1},"doc://ArgumentParser/SQ":{"identifier":"doc:\/\/ArgumentParser\/SQ","title":"Swift.Equatable","type":"unresolvable"}}}